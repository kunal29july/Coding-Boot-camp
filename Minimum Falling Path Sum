'''
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100
'''
class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        
        n=len(matrix) #rows and col
        ans =float("inf")
        for currcol in range (0,n):
            tempans=self.minsum(0,currcol,matrix,n)
            ans=min(ans,tempans)
        return ans
    def minsum(self,currrow,currcol,matrix,n):
            
        if currrow<0 or currrow>=n or currcol<0 or currcol>=n:
            return 100001
            
        if currrow==n-1:
            return matrix[currrow][currcol]
            
        right=matrix[currrow][currcol]+self.minsum(currrow+1,currcol,matrix,n)
        down=matrix[currrow][currcol]+self.minsum(currrow+1,currcol-1,matrix,n)
        diag=matrix[currrow][currcol]+self.minsum(currrow+1,currcol+1,matrix,n)
        
        return min(right,down,diag)
        
            
