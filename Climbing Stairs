You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45



#code********************

class Solution:
    def climbStairs(self, n: int) -> int:
        return self.ways(0,n,{})
    def ways(self,curr_stair,target,memo):
        if curr_stair==target:
            return 1
            
        if curr_stair>target:
            return 0
         
        key=curr_stair   
        if key in memo:
            return memo[key]
            
        one_step=self.ways(key+1,target,memo)
        two_step=self.ways(key+2,target,memo)
        
        memo[key]= one_step+two_step
        return one_step+two_step
        
        # code here
