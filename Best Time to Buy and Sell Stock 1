You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

#code--------------------------------->
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        return  self.earnprofit(prices,0,True,1,{})
    def earnprofit(self,price,currday,canbuy,tran_count,memo):
        
        if currday>=len(price):
            return 0
        
        if tran_count==0:
            return 0
        
        currkey=(currday,canbuy,tran_count)
        
        if currkey in memo:
            return memo[currkey]
        
        if canbuy==True:
            
            idle=self.earnprofit(price,currday+1,canbuy,tran_count,memo)
            buy=-price[currday]+self.earnprofit(price,currday+1,False,tran_count,memo)
            memo[currkey]= max(idle,buy)
            
            
        else:
            idle=self.earnprofit(price,currday+1,canbuy,tran_count,memo)
            sell=price[currday]+self.earnprofit(price,currday+1,True,tran_count-1,memo)
            
            memo[currkey] =max(idle,sell)
        return memo[currkey]
        
